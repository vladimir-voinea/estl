#pragma once

#include <stddef.h>

namespace vl
{
  using ptrdiff_t = ::ptrdiff_t;
  using size_t = ::size_t;
  using max_align_t = ::max_align_t;
  using nullptr_t = decltype(nullptr);
 
  enum class byte : unsigned char {};
 
    // byte type operations
    template<class IntType>
    constexpr byte& operator<<=(byte& b, IntType shift) noexcept;

    template<class IntType>
    constexpr byte operator<<(byte b, IntType shift) noexcept;

    template<class IntType>
    constexpr byte& operator>>=(byte& b, IntType shift) noexcept;

    template<class IntType>
    constexpr byte operator>>(byte b, IntType shift) noexcept;

    constexpr byte& operator|=(byte& l, byte r) noexcept;
    constexpr byte operator|(byte l, byte r) noexcept;
    constexpr byte& operator&=(byte& l, byte r) noexcept;
    constexpr byte operator&(byte l, byte r) noexcept;
    constexpr byte& operator^=(byte& l, byte r) noexcept;
    constexpr byte operator^(byte l, byte r) noexcept;
    constexpr byte operator~(byte b) noexcept;

    template<class IntType>
    constexpr IntType to_integer(byte b) noexcept;
}