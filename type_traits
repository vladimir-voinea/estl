#pragma once

#include <cstddef>

namespace std
{

template <typename T, T v> struct integral_constant
{
    static constexpr T value = v;
    using value_type = T;
    using type = integral_constant;
    constexpr operator value_type() const noexcept
    {
        return value;
    }
    constexpr value_type operator()() const noexcept
    {
        return value;
    }
};

using true_type = integral_constant<bool, true>;
using false_type = integral_constant<bool, false>;

template <typename T, typename U> struct is_same : false_type
{
};

template <typename T> struct is_same<T, T> : true_type
{
};

template <class T, class U> inline constexpr bool is_same_v = is_same<T, U>::value;

template <bool B, class T = void> struct enable_if
{
};

template <class T> struct enable_if<true, T>
{
    typedef T type;
};

template <bool B, class T = void> using enable_if_t = typename enable_if<B, T>::type;

template <class T> struct is_array : std::false_type
{
};

template <class T> struct is_array<T[]> : std::true_type
{
};

template <class T, std::size_t N> struct is_array<T[N]> : std::true_type
{
};

template <class T> struct remove_extent
{
    using type = T;
};

template <class T> struct remove_extent<T[]>
{
    using type = T;
};

template <class T, std::size_t N> struct remove_extent<T[N]>
{
    using type = T;
};

template <class T> using remove_extent_t = typename remove_extent<T>::type;

template <class T> struct is_lvalue_reference : std::false_type
{
};
template <class T> struct is_lvalue_reference<T &> : std::true_type
{
};

template <class T> struct remove_reference
{
    typedef T type;
};
template <class T> struct remove_reference<T &>
{
    typedef T type;
};
template <class T> struct remove_reference<T &&>
{
    typedef T type;
};

template <class T> using remove_reference_t = typename remove_reference<T>::type;

namespace detail
{
template <class T> struct type_identity
{
    using type = T;
}; // or use std::type_identity (since C++20)

template <class T> auto try_add_pointer(int) -> type_identity<typename std::remove_reference<T>::type *>; // usual case

template <class T>
auto try_add_pointer(...) -> type_identity<T>; // unusual case (cannot form std::remove_reference<T>::type*)
} // namespace detail

template <class T> struct add_pointer : decltype(detail::try_add_pointer<T>(0))
{
};

template <class T> using add_pointer_t = typename add_pointer<T>::type;

template <class T> struct remove_cv
{
    typedef T type;
};
template <class T> struct remove_cv<const T>
{
    typedef T type;
};
template <class T> struct remove_cv<volatile T>
{
    typedef T type;
};
template <class T> struct remove_cv<const volatile T>
{
    typedef T type;
};

template <class T> struct remove_const
{
    typedef T type;
};
template <class T> struct remove_const<const T>
{
    typedef T type;
};

template <class T> struct remove_volatile
{
    typedef T type;
};
template <class T> struct remove_volatile<volatile T>
{
    typedef T type;
};

template <class T> using remove_cv_t = typename remove_cv<T>::type;
template <class T> using remove_const_t = typename remove_const<T>::type;
template <class T> using remove_volatile_t = typename remove_volatile<T>::type;

template <bool B, class T, class F> struct conditional
{
    using type = T;
};

template <class T, class F> struct conditional<false, T, F>
{
    using type = F;
};

template <bool B, class T, class F> using conditional_t = typename conditional<B, T, F>::type;

// primary template
template <class> struct is_function : std::false_type
{
};

// specialization for regular functions
template <class Ret, class... Args> struct is_function<Ret(Args...)> : std::true_type
{
};

// specialization for variadic functions such as std::printf
template <class Ret, class... Args> struct is_function<Ret(Args......)> : std::true_type
{
};

// specialization for function types that have cv-qualifiers
template <class Ret, class... Args> struct is_function<Ret(Args...) const> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) volatile> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) const volatile> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) const> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) volatile> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) const volatile> : std::true_type
{
};

// specialization for function types that have ref-qualifiers
template <class Ret, class... Args> struct is_function<Ret(Args...) &> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) const &> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) volatile &> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) const volatile &> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) &> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) const &> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) volatile &> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) const volatile &> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) &&> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) const &&> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) volatile &&> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) const volatile &&> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) &&> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) const &&> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) volatile &&> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) const volatile &&> : std::true_type
{
};

// specializations for noexcept versions of all the above (C++17 and later)
template <class Ret, class... Args> struct is_function<Ret(Args...) noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) const noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) volatile noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) const volatile noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) const noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) volatile noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) const volatile noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) &noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) const &noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) volatile &noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) const volatile &noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) &noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) const &noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) volatile &noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) const volatile &noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) &&noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) const &&noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) volatile &&noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args...) const volatile &&noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) &&noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) const &&noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) volatile &&noexcept> : std::true_type
{
};
template <class Ret, class... Args> struct is_function<Ret(Args......) const volatile &&noexcept> : std::true_type
{
};

template <class T> inline constexpr bool is_function_v = is_function<T>::value;

template <class T> struct decay
{
  private:
    typedef typename std::remove_reference<T>::type U;

  public:
    typedef typename std::conditional<
        std::is_array<U>::value, typename std::add_pointer<typename std::remove_extent<U>::type>::type,
        typename std::conditional<std::is_function<U>::value, typename std::add_pointer<U>::type,
                                  typename std::remove_cv<U>::type>::type>::type type;
};

template <class T> using decay_t = typename decay<T>::type;

} // namespace std