#pragma once

#ifdef ARDUINO

#include "type_traits"

namespace std
{

template <class T> inline T &&forward(typename std::remove_reference<T>::type &t) noexcept
{
    return static_cast<T &&>(t);
}

template <class T> inline T &&forward(typename std::remove_reference<T>::type &&t) noexcept
{
    static_assert(!std::is_lvalue_reference<T>::value, "Can not forward an rvalue as an lvalue.");
    return static_cast<T &&>(t);
}

template <typename TFirst, typename TSecond> struct pair
{
    TFirst first;
    TSecond second;
};

template <typename T> struct remove_reference;

template <typename T> typename std::remove_reference<T>::type &&move(T &&arg) noexcept
{
    return static_cast<typename std::remove_reference<T>::type &&>(arg);
}

} // namespace std

#endif